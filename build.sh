#!/bin/sh

if [ -z "${STAGING_DIR}" ]
then
	echo "please set STAGING_DIR to your debian rootfs"
	exit 1
fi

if [ -z "${TOOLCHAIN_BIN_DIR}" ]
then
	echo "please set TOOLCHAIN_BIN_DIR to your toolchain/bin directory"
	exit 1
fi

if [ -z "${CROSS_COMPILE}" ]
then
	echo "please set CROSS_COMPILE, e.g \"arm-linux-gnueabihf-\""
	exit 1
fi

if [ -z "${ARCH}" ]
then
	echo "please set ARCH, e.g \"arm\""
	exit 1
fi

if [ ! -f ${STAGING_DIR}/usr/include/lua5.1/lua.h ]
then
	echo "Please install liblua5.1-0-dev to your rootfs"
	echo "apt-get install liblua5.1-0-dev"
	exit 1
fi
LUA_MULTIARCH_INCLUDE_DIR=$(dirname ${STAGING_DIR}/usr/include/*/lua5.1-deb-multiarch.h)
LUA_CFLAG="-I${STAGING_DIR}/usr/include/lua5.1/ -I${LUA_MULTIARCH_INCLUDE_DIR}"

TOPDIR=$PWD
LIBUBOX_BUILD=${TOPDIR}/libubox_build
UCI_BUILD=${TOPDIR}/uci_build
INSTALL_DIR=${TOPDIR}/rootfs_install

[ -d ${LIBUBOX_BUILD} ] && rm -rf ${LIBUBOX_BUILD}
[ -d ${UCI_BUILD} ] && rm -rf ${UCI_BUILD}
[ -d ${INSTALL_DIR} ] && rm -rf ${INSTALL_DIR}

mkdir -p ${LIBUBOX_BUILD}
mkdir -p ${UCI_BUILD}
mkdir -p ${INSTALL_DIR}

CMAKE_FIND_ROOT_PATH=${STAGING_DIR}/
echo "Build libubox"
cd ${LIBUBOX_BUILD}
cmake \
	-DCMAKE_SYSTEM_NAME=Linux \
	-DCMAKE_SYSTEM_VERSION=1 \
	-DCMAKE_SYSTEM_PROCESSOR=${ARCH} \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_C_FLAGS_RELEASE="-DNDEBUG -I${LIBUBOX_INSTALL}/include" \
	-DCMAKE_CXX_FLAGS_RELEASE="-DNDEBUG" \
	-DCMAKE_LINKER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}gcc" \
	-DCMAKE_C_COMPILER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}gcc" \
	-DCMAKE_CXX_COMPILER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}g++" \
	-DCMAKE_ASM_COMPILER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}gcc" \
	-DLUA_CFLAGS="${LUA_CFLAG}" \
	-DCMAKE_EXE_LINKER_FLAGS:STRING="${TARGET_LDFLAGS}" \
	-DCMAKE_MODULE_LINKER_FLAGS:STRING="${TARGET_LDFLAGS} ${CMAKE_SHARED_LDFLAGS}" \
	-DCMAKE_SHARED_LINKER_FLAGS:STRING="${TARGET_LDFLAGS} ${CMAKE_SHARED_LDFLAGS}" \
	-DCMAKE_AR="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}ar" \
	-DCMAKE_NM="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}nm" \
	-DCMAKE_RANLIB="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}ranlib" \
	-DCMAKE_FIND_ROOT_PATH="${CMAKE_FIND_ROOT_PATH}" \
	-DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=BOTH \
	-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
	-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
	-DCMAKE_STRIP=: \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DDL_LIBRARY=${STAGING_DIR} \
	-DCMAKE_PREFIX_PATH=${STAGING_DIR} \
	-DCMAKE_SKIP_RPATH=TRUE  \
	../libubox

make
mkdir -p ${INSTALL_DIR}/usr/include/libubox
mkdir -p ${INSTALL_DIR}/usr/lib
mkdir -p ${INSTALL_DIR}/usr/bin
cp ../libubox/*.h ${INSTALL_DIR}/usr/include/libubox
cp ${LIBUBOX_BUILD}/libubox.so ${INSTALL_DIR}/usr/lib
cp ${LIBUBOX_BUILD}/lua/uloop.so ${INSTALL_DIR}/usr/lib

cd -


LIBUBOX_CFLAGS=-I${INSTALL_DIR}/usr/include/
LIBUBOX_LDFLAGS=-L${INSTALL_DIR}/usr/lib
TARGET_LDFLAGS=${LIBUBOX_LDFLAGS}

echo "Build uci"
cd ${UCI_BUILD}
cmake \
	-DCMAKE_SYSTEM_NAME=Linux \
	-DCMAKE_SYSTEM_VERSION=1 \
	-DCMAKE_SYSTEM_PROCESSOR=${ARCH} \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_C_FLAGS_RELEASE="-DNDEBUG ${LIBUBOX_CFLAGS}" \
	-DCMAKE_CXX_FLAGS_RELEASE="-DNDEBUG" \
	-DCMAKE_LINKER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}gcc" \
	-DCMAKE_C_COMPILER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}gcc" \
	-DCMAKE_CXX_COMPILER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}g++" \
	-DCMAKE_ASM_COMPILER="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}gcc" \
	-DLUA_CFLAGS="${LUA_CFLAG}" \
	-DCMAKE_EXE_LINKER_FLAGS:STRING="${TARGET_LDFLAGS}" \
	-DCMAKE_MODULE_LINKER_FLAGS:STRING="${TARGET_LDFLAGS} ${CMAKE_SHARED_LDFLAGS}" \
	-DCMAKE_SHARED_LINKER_FLAGS:STRING="${TARGET_LDFLAGS} ${CMAKE_SHARED_LDFLAGS}" \
	-DCMAKE_AR="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}ar" \
	-DCMAKE_NM="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}nm" \
	-DCMAKE_RANLIB="${TOOLCHAIN_BIN_DIR}/${CROSS_COMPILE}ranlib" \
	-DCMAKE_FIND_ROOT_PATH="${CMAKE_FIND_ROOT_PATH}" \
	-DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=BOTH \
	-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
	-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
	-DCMAKE_STRIP=: \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DDL_LIBRARY=${STAGING_DIR} \
	-DCMAKE_PREFIX_PATH=${STAGING_DIR} \
	-DCMAKE_SKIP_RPATH=TRUE  \
	../uci

make uci cli
cp ${UCI_BUILD}/libuci.so ${INSTALL_DIR}/usr/lib/
cp ${UCI_BUILD}/uci ${INSTALL_DIR}/usr/bin/

cd -

exit 0
